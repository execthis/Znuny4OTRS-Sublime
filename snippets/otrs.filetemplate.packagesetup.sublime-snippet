<snippet>
	<content><![CDATA[
# --
# var/packagesetup/${1:Znuny4OTRS}.pm - code to excecute during package installation
# Copyright (C) 2015 Znuny GmbH, http://znuny.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package var::packagesetup::${1:Znuny4OTRS};

use strict;
use warnings;

use Kernel::System::SysConfig;

use Kernel::System::VariableCheck qw(:all);

=head1 NAME

var::packagesetup::${1:Znuny4OTRS} - Installation and/or update code

=head1 SYNOPSIS

=head1 PUBLIC INTERFACE

=over 4

=cut

=item new()

create an object

    use Kernel::Config;
    use Kernel::System::Encode;
    use Kernel::System::Log;
    use Kernel::System::Time;
    use Kernel::System::Main;
    use Kernel::System::DB;
    use var::packagesetup::${1:Znuny4OTRS};

    my \$ConfigObject = Kernel::Config->new();
    my \$EncodeObject = Kernel::System::Encode->new(
        ConfigObject => \$ConfigObject,
    );
    my \$LogObject = Kernel::System::Log->new(
        ConfigObject => \$ConfigObject,
        EncodeObject => \$EncodeObject,
    );
    my \$TimeObject = Kernel::System::Time->new(
        ConfigObject => \$ConfigObject,
        LogObject    => \$LogObject,
    );
    my \$MainObject = Kernel::System::Main->new(
        ConfigObject => \$ConfigObject,
        EncodeObject => \$EncodeObject,
        LogObject    => \$LogObject,
    );
    my \$DBObject = Kernel::System::DB->new(
        ConfigObject => \$ConfigObject,
        EncodeObject => \$EncodeObject,
        LogObject    => \$LogObject,
        MainObject   => \$MainObject,
    );
    my \$ProcessObject = var::packagesetup::${1:Znuny4OTRS}->new(
        ConfigObject       => \$ConfigObject,
        LogObject          => \$LogObject,
        EncodeObject       => \$EncodeObject,
        MainObject         => \$MainObject,
        TimeObject         => TimeObject,
        DBObject           => \$DBObject,
    );

=cut

sub new {
    my ( \$Type, %Param ) = @_;

    # allocate new hash for object
    my \$Self = {};
    bless( \$Self, \$Type );

    # check needed objects
    for my \$Object (
        qw(ConfigObject LogObject EncodeObject MainObject TimeObject DBObject)
        )
    {
        \$Self->{\$Object} = \$Param{\$Object} || die "Got no \$Object!";
    }

    # create needed sysconfig object
    \$Self->{SysConfigObject} = Kernel::System::SysConfig->new( %{\$Self} );

    # rebuild ZZZ* files
    \$Self->{SysConfigObject}->WriteDefault();

    # define the ZZZ files
    my @ZZZFiles = (
        'ZZZAAuto.pm',
        'ZZZAuto.pm',
    );

    # reload the ZZZ files (mod_perl workaround)
    for my \$ZZZFile (@ZZZFiles) {

        PREFIX:
        for my \$Prefix (@INC) {
            my \$File = \$Prefix . '/Kernel/Config/Files/' . \$ZZZFile;
            next PREFIX if !-f \$File;
            do \$File;
            last PREFIX;
        }
    }

    # get new ConfigObject with the updated config data
    \$Self->{ConfigObject} = Kernel::Config->new();

    return \$Self;
}

=item CodeInstall()

run the code install part

    my \$Result = \$CodeObject->CodeInstall();

=cut

sub CodeInstall {
    my ( \$Self, %Param ) = @_;

    return 1;
}

=item CodeReinstall()

run the code reinstall part

    my \$Result = \$CodeObject->CodeReinstall();

=cut

sub CodeReinstall {
    my ( \$Self, %Param ) = @_;

    return 1;
}

=item CodeUpgrade()

run the code upgrade part

    my \$Result = \$CodeObject->CodeUpgrade();

=cut

sub CodeUpgrade {
    my ( \$Self, %Param ) = @_;

    return 1;
}

=item CodeUninstall()

run the code uninstall part

    my \$Result = \$CodeObject->CodeUninstall();

=cut

sub CodeUninstall {
    my ( \$Self, %Param ) = @_;

    return 1;
}

1;

]]></content>
    <tabTrigger>otrs.filetemplate.packagesetup</tabTrigger>
</snippet>
