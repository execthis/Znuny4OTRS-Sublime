<snippet>
    <content><![CDATA[
<CodeUpgrade Type="${1:post|pre}"${2: Version="1.0.0"}><![CDATA[
# Notes on "Version" attribute:
# skipped if \$UploadPackageVersion     < \$CodeBlockVersion
# skipped if \$InstalledPackageVersion >= \$CodeBlockVersion

    # define function name
    my \$FunctionName = 'CodeUpgrade';

    # create the package name
    my \$CodeModule = 'var::packagesetup::' . \$Param{Structure}->{Name}->{Content};
    \$CodeModule    =~ s/-//g;

    # The code module has just recently been copied to it's location in the file system.
    # In a persistent Perl environment an old version of the module might still be loaded,
    # as watchdogs like Apache2::Reload haven't had a chance to reload it.
    # So we need to make sure that the new version is being loaded.
    # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
    # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
    my \$CodeModulePath = \$CodeModule;
    \$CodeModulePath =~ s/::/\//g;
    \$CodeModulePath .= '.pm';
    delete \$INC{\$CodeModulePath};

    # load the module
    if ( \$Self->{MainObject}->Require(\$CodeModule) ) {

        # create new instance
        my \$CodeObject = \$CodeModule->new( %{\$Self} );

        if (\$CodeObject) {

            # start methode
            if ( !\$CodeObject->\$FunctionName(%{\$Self}) ) {
                \$Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method \$FunctionName() on \$CodeModule.pm.",
                );
            }
        }

        # error handling
        else {
            \$Self->{LogObject}->Log(
                Priority => 'error',
                Message  => "Could not call method new() on \$CodeModule.pm.",
            );
        }
    }

    $3

${4:]]}></CodeUpgrade>
]]></content>
    <tabTrigger>otrs.sopm.block.codeupgrade.packagesetup</tabTrigger>
</snippet>